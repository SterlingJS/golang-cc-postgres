apiVersion: keda.sh/v1alpha1
kind: ScaledJob
metadata:
  name: {{ .Release.Name }}-scaledjob
spec:
  jobTargetRef:
    parallelism: 1
    completions: 1
    activeDeadlineSeconds: 60
    backoffLimit: 6
    template:
      spec:
        restartPolicy: Never
        volumes:
          - name: input
            emptyDir: {}
        initContainers:
          - name: 'input'
            image: 'docker.io/library/bash'
            command:
            - "bash"
            - "-c"
            - |
              echo $JOB_COMPLETION_INDEX > /input/index.txt          
            volumeMounts:
              - mountPath: /input
                name: input
        containers:
          - name: {{ .Chart.Name }}
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            command:
              - "/root/consumer"
              - "/input/index.txt"
            ports:
              - containerPort: 8080
            env:
              - name: DB_CONN_STRING
                value: "{{ .Values.postgres.connString }}"
              - name: QUEUE_TABLE
                value: "{{ .Values.postgres.queueTable }}"
            volumeMounts:
              - mountPath: /input
                name: input
            livenessProbe:
              httpGet:
                path: /health
                port: 8080
              initialDelaySeconds: 4
              periodSeconds: 1
            readinessProbe:
              httpGet:
                path: /health
                port: 8080
              initialDelaySeconds: 4
              periodSeconds: 1
  pollingInterval: 5   # Optional. Default: 30 seconds
  maxReplicaCount: 5  # Optional. Default: 100
  successfulJobsHistoryLimit: 0   # Optional. Default: 100. How many completed jobs should be kept.
  failedJobsHistoryLimit: 0       # Optional. Default: 100. How many failed jobs should be kept.
  scalingStrategy:
    strategy: "default"
  triggers:
    - type: postgresql
      metadata:
        host: {{ .Values.postgres.host }}
        dbName: {{ .Values.postgres.db }}
        userName: {{ .Values.postgres.username }}
        port: "{{ .Values.postgres.port }}"
        query: "SELECT COUNT(*) FROM {{ .Values.postgres.queueTable }}"
        targetQueryValue: "500"
        activationTargetQueryValue: "0"
        sslmode: disable
      authenticationRef:
        name: postgres-trigger-authentication